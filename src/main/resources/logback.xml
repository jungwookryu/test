<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- By default, encoders are assigned the hubType ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder>
            <pattern>%d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-3level %logger{5} - %msg %n</pattern>
        </encoder>
    </appender>
    <!--
    <appender name="LogstashAppender" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        remoteHost and port are optional (default values shown) 
        <remoteHost>211.55.59.232</remoteHost>
        <port>17728</port>
        encoder is required 
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
          <providers>
            <timestamp/>
            <pattern>
              <pattern>
                {
                "time_new": "%d{yyyyMMdd HH:mm:ss.SSS}",
                "thread": "%thread",
                "level": "%-3level",
                "logger": "%logger{5}",
                "message": "%message %n"
                }
              </pattern>
            </pattern>
          </providers>
        </encoder>
    </appender>
    

    <logger name="LOG_STASH" level="info" additivity="false">
        <appender-ref ref="LogstashAppender"/>
    </logger>
-->
	<!--jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.--> 
	<logger name="jdbc.sqlonly" level="DEBUG">
		<appender-ref ref="STDOUT"/>
    </logger>
	<!--SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.--> 
	<logger name="jdbc.sqltiming" level="DEBUG">
		<appender-ref ref="STDOUT"/>
    </logger>
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="DEBUG">
		<appender-ref ref="STDOUT"/>
    </logger>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="DEBUG">
		<appender-ref ref="STDOUT"/>
    </logger>

	<logger name="jdbc.connection" level="DEBUG">
		<appender-ref ref="STDOUT"/>
    </logger>
	<!--  SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="DEBUG">
        <appender-ref ref="STDOUT"/>
    </logger>
    <root level="DEBUG">
        <!-- <appender-ref ref="LogstashAppender" /> -->
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>
