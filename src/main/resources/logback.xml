<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<property name="LOG_DIR" value="logs" />
	<property name="LOG_PATH_NAME" value="${LOG_DIR}/iot_connected_home.log" />
	<property name="LOG_PATH_NAME_SIP" value="${LOG_DIR}/iot_connected_home_sip.log" />
	<property name="LOG_AMQP_PATH_NAME" value="iot_connected_home_amqp" />
	<timestamp key="bySecond" datePattern="yyyy-MM-dd HH:mm:ss" />
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- By default, encoders are assigned the hubType ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
		<encoder>
			<pattern>%d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-3level %logger{5} - %msg %n</pattern>
		</encoder>
	</appender>
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<param name="Target" value="System.out" />
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-3level %logger{5} - %msg %n</pattern>
		</layout>
	</appender>
	<appender name="File" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH_NAME}</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>%d{yyyy-MM-dd HH:mm:ss} %-3level %logger{5} - %msg %n</Pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_DIR}/iot_connected_home.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>400MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory> 
		</rollingPolicy>
	</appender>
	<appender name="FileSip" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH_NAME_SIP}</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<Pattern>%d{yyyy-MM-dd HH:mm:ss} %-3level %logger{5} - %msg %n</Pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- rollover daily -->
			<fileNamePattern>${LOG_DIR}/iot_connected_home_sip.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory> 
		</rollingPolicy>

	</appender>
    <appender name="File_amqp" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 파일이 하루에 한개씩 생성된다 -->
            <fileNamePattern>${LOG_DIR}_amqp/${LOG_AMQP_PATH_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>300MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory> 
        </rollingPolicy>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <!-- <level>INFO</level> -->
            <evaluator name="loggingTaskAmqp">
                <expression>
                    logger.contains("messageArrived:")
                </expression>
            </evaluator>
            <onMatch>DENY</onMatch>
            <!-- <onMismatch>DENY</onMismatch> -->
        </filter>
        <encoder>
            <pattern>%d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-3level %logger{5} - %msg %n</pattern>
        </encoder>
    </appender>
     <appender name="File_db" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 파일이 하루에 한개씩 생성된다 -->
            <fileNamePattern>${LOG_DIR}_db/iot_connected_home_db.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-3level %logger{5} - %msg %n</pattern>
        </encoder>
    </appender>
	<!--jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 
		대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="DEBUG">
	   <appender-ref ref="File_db" />
	   <appender-ref ref="console" />
	</logger>
	<!--SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="DEBUG">
		<appender-ref ref="console" />
	</logger>
	<logger name="com.ht.connected.home.backend.sip" additivity="false" level="DEBUG">
  	<appender-ref ref="FileSip" />
	</logger>
	<logger name=" com.ht.connected.home.backend.controller.mqtt.ConsumerListener" level="DEBUG">
        <appender-ref ref="console" />
  	    <appender-ref ref="File_amqp" />
	</logger>
	<logger name="jdbc.connection" level="DEBUG">
		<appender-ref ref="console" />
		<appender-ref ref="File_db" />
	</logger>
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="DEBUG">
		<appender-ref ref="console" />
		<appender-ref ref="File_db" />
	</logger>
	<root level="DEBUG">
		<!-- <appender-ref ref="LogstashAppender" /> -->
		<appender-ref ref="console" />
	</root>
	<root level="INFO">
		<!-- <appender-ref ref="LogstashAppender" /> -->
		<appender-ref ref="File" />
    </root>
</configuration>